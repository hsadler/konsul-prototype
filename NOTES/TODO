

TODO

- take some new videos

- refactor to shared data factory-entity-template objects for mappings
    - would be keyed by feType
    - schema:
        - type <int>
        - group <int> (maybe)
        - sprite <Sprite>
        - prefab <GameObject>
        - displayName <string>
        - processedFrom <Dictionary <type <int>, count <int>>>
        - assembledFrom <Dictionary <type <int>, count <int>>>
        - refinedFrom <Dictionary <type <int>, count <int>>>
        - furnacedFrom <Dictionary <type <int>, count <int>>>
        - biolabedFrom <Dictionary <type <int>, count <int>>>
    - house in FEData manager component script as the single place where factory-entity-template definitions are created

- crafting system:
    - The resource cost of each factory entity
    - requirements:
        - ability to lookup resources required to create a particular factory-entity
        - ability to easily tweak recipies

- structure io filter:
    - The ability to apply either an include or exclude filter list to an existing structure-io
    - UX:
        - select structure
        - tab to desired io
        - press edit-key to enter structure-io-edit mode
        - select either include or exclude filter type
        - select factory-entities from a list of icons in order to build the filter list
        - press back-key to back out of structure-io-edit mode
    - requirements:
        - structure-io-edit mode player control
        - edit mode modal
        - io-filter type selection buttons
        - io-filter fe-type icons to add or remove from filter
        - io-filter clear button to remove filter from the selected io

- add factory structures:
    - Furnace
    - Refinery
    - Assembler

- add music

- test and polish workers:
    - worker shouldn't fetch items if already in inventory
    - workers shouldn't deliver to storages marked for removal
    - worker should build structures from materials, not just placement
    - worker actions should take time:
        - rotating
        - retrieving
        - depositing
        - placing
        - building

- POC early game progression:
    - figure out initial setting
    - player gets basic factory working
    - player begins expanding production
    - player harnesses the power of the sun
    
- POC power gathering from stars:
    - Photovoltaic
    - Mirror
    - PowerCell


For consideration/prioritization:
    - give in-transit entities a TTL
    - I'm probably using interfaces incorrectly. Research and possibly refactor to using classes and inheritance instead.
    - consider a freeze-time control
    - consider different tiers of power gathering
        (though prob not for prototype)


- Bugs:
    - factory-structures without resource-io behavior should not be able to go into transit-mode


- CLI:
    - TODO


Improvements and Polish:
    - polish black hole, need high-rez sprite image
    - prevent star overlap by implementing p-system buffer during generation
    - prevent planetary system overlap with black hole
    
